# .github/workflows/docker-publish.yml
name: Build and Push Docker Image

on:
  # 当推送到 main 分支时触发
  push:
    branches: [ "main", "master" ]
    # 当推送标签时触发（用于版本发布）
    tags: [ 'v*.*.*' ]
  
  # 当创建 Pull Request 时触发（仅构建，不推送）
  pull_request:
    branches: [ "main", "master" ]
  
  # 允许手动触发
  workflow_dispatch:

env:
  # Docker Hub 仓库名称（替换为你的用户名/仓库名）
  REGISTRY: docker.io
  IMAGE_NAME: caoyang2002/share-anything

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # 为 main 分支设置 latest 标签
          type=ref,event=branch
          type=ref,event=pr
          # 为标签设置版本号
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # 为 main 分支设置 latest 标签
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        # 启用多平台构建
        platforms: linux/amd64,linux/arm64
        # 仅在非 PR 时推送
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # 启用缓存
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.build-and-push.outputs.digest }}
        push-to-registry: true